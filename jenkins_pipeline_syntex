1. Hello World example , with 2 stages or pipeline created

pipeline{
    agent any
    stages{
        stage('build'){
            steps{
				echo 'hello build'    
            }
        }
        stage('deploy'){
            steps{
				echo "deploy"
            }
        }
    }        
}

agent are of 3 type:-
1. any - Execute the Pipeline, or stage, on any available agent. 
2. none - When applied at the top-level of the pipeline block no global agent will be allocated for the entire Pipeline run and each stage section will need to contain its own agent section.
3. label : are of 3 type:
			1. node
			2. docker
			3. dockerfile
			
			
stage are further followed by:
1. steps
2. tools
3. agent
4. options
		4.1) retry
		4.2) timeout
		4.3.) timestamps
		4.4.) skipdefaultcheckout

		

2. agent example of label (node)
there are 2 differnt way to use node in jenkins label
-----running code on slave node of jenkins--------------------------------------------------------------------------------------------------
pipeline{
    agent {
        label "slavenode"
    }
    stages{
        stage('build'){
            steps{
            echo 'hello build'
            
            }
        }
        stage('deploy'){
            steps{
            echo "deploye"
            }
        }
    }
        
}

-------running jenkins code with on node of jenkins and use label to tell on which slave you wnat to run the code--------------------------------------------------
pipeline{
    agent {
        node {
            label "slavenode"
            customWorkspace "/home/slavenode/test"
        }
        
    }
    stages{
        stage('build'){
            steps{
            echo 'hello build'
            
            }
        }
        stage('deploy'){
            steps{
            echo "deploye"
            }
        }
    }
        
}

3. stage steps script
----------------------------------------------------------------
create parameter which take varibale from user name varibale as "name".

pipeline{
    agent any 
    stages{
        stage('build'){
            steps{
                script{
                    def name = "$name"
                    if (name == "gaurav")
                        println("hello gaurav")
                    else
                        println("this is not gaurav")
                sleep 5
                echo "script end"
                }
            }
        }   
    }   
}

5. retry and timeout command 
-------------------------------------------------------------
pipeline{
    agent any
    stages{
        stage('build'){
            steps{
                retry(3)
                {
                    echo 'helo world'
                    error "error in retry"
                }   
                echo "echo after 3 retry"
            }
        }
        
    }
}

===============

pipeline{
    agent any
    stages{
        stage('build'){
            steps{
                timeout(time: 1, unit: 'SECONDS'){
                    echo "sleeping in timeout"
                    sleep 2
                } 
            }
        }
        
    }
}
=====RUN the code with sleep and without sleep command==

pipeline{
    agent any
    stages{
        stage('build'){
            steps{
                retry(3){
                    timeout(time: 1, unit: 'SECONDS'){
                    echo "sleeping in timeout"
                    sleep 2
                    }
                } 
            }
        }
        
    }
}

--------------------------------------------------------------------------------------------
6. Tools : Tool is used in stage part in which we will mention the JDK, Maven and it will used global in the script.
"sh" is used to run any command same as JDK and maven.

pipeline{
    agent any
    stages{
        stage('build'){
            tools{
                maven 'maven-3.6.3'
            }
            steps{
                sh 'mvn --version'
            }
                
            
        }
    }
}

----------------------------------------------------------------------------------------
stage are further followed by:
1. steps
2. tools
3. agent
4. options
		4.1) retry
		4.2) timeout
		4.3.) timestamps
		4.4.) skipdefaultcheckout


7)  error-Retry

 // it will retry 3 time mention in the retry block
pipeline{
    agent any
    stages{
        stage('build'){
           options{
               retry(3)
              
           }
           steps{
               echo "hello"
               error "error has occured"
               echo "after error"
           }
                
            
        }
    }
}

====================================
//this will stop the retry and use a varibale currentBuild.result which store the script result to FAILURE and exit the loop.
pipeline{
    agent any
    stages{
        stage('build'){
           options{
               retry(3)
              
           }
           steps{
               echo "before failure scipt"
               script{
                   currentBuild.result = 'FAILURE'
               }
               echo "after scipt of failure"
           }
                
            
        }
    }
}
-----------------------------------------------------------------------
8) stage -options  timeout

pipeline{
    agent any
    stages{
        stage('build'){
           options{
                timeout(time: 1, unit: 'SECONDS')
           }
           steps{
               echo "hello after timeout "
               sleep 2
           }
                
            
        }
    }
}
---------------------------------------------------------------------------------
9.) timestamps at the stage level: This will print the time in frount of the steps because we have included the timestamps

pipeline{
    agent any
    stages{
        stage('build'){
            options{
                timestamps()
            }
            steps{
                echo "hello 1"
                echo "helo 2"  
            }
            
        }
        
        stage('test'){
            steps{
                echo "second stage test"
                echo "test stage"
            }
        }
    }
}

==timestamps options at the pipeline level===this will print time on front of every line of code===================
pipeline{
    agent any
    options{
                timestamps()
    }
    stages{
        stage('build'){
            
            steps{
                echo "hello 1"
                echo "helo 2"  
            }
            
        }
        
        stage('test'){
            steps{
                echo "second stage test"
                echo "test stage"
            }
        }
    }
}
------------------------------------------------------------------------------------------------------------
12) skipdefaultcheckout   ==> important
-----------------------------------------------------------------------------------------------------------
13)When
	13.1. environment
	13.2  EQUALS
	13.3  NOT
	13.4 	expression
	13.5 	allOf
	13.6	anyOf


environment varibale is created and given some value ,know  changes  will only be done to those stag when environment match the global variable. 

pipeline{
    agent any
    environment{
        DEPLOY_TO='production'
    }
    stages{
        stage('build'){
            when{
                environment name:'DEPLOY_TO', value: 'production'
            }
            steps{
                echo "building"
            }
        }
        stage('test'){         // this step is skip due to environment varibale value to production and in this staging is used
            when{
                environment name:'DEPLOY_TO', value: 'staging'
            }
            steps{
                echo "testing"
            }
                
        }
     }
    
}
================================================
EQUALS : environment variable with equal used in when in stage

pipeline{
    agent any
    environment{
        some_name='yadav'   // replcae yadav iwth gaurav and check again
    }
    stages{
        stage('build'){
            when{
                equals expected:'gaurav', actual: some_name
            }
            steps{
                echo "$some_name"
            }
        }
        
     }
    
}

==============================
NOT , it will revert the true value to false and false value to true

pipeline{
    agent any
    environment{
        some_name='yadav'    \\replcae yadav with gaurav and then it will skip
    }
    stages{
        stage('build'){
            when{
                not{
                    equals expected:'gaurav', actual: some_name
            
                }
            }
            
            steps{
                echo "$some_name"
            }
        }
        
     }
    
}

=============================
expression is used as below


pipeline{
    agent any
    environment{
        version='1.0'
    }
    stages{
        stage('build'){
            when{
                expression{
                    version == '1.0'   //replcae  with 2.0 and it will skip 
                    
                }
            }
            
            steps{
                echo "version is $version"
            }
        }
        
     }
    
}

============================
allOf  :: in thos both the condition should be true otherwise it kill skip the code

pipeline{
    agent any
    environment{
        version='1.0'
        some_name="gaurav"
    }
    stages{
        stage('build'){
            when{
                allOf{
                    environment name:'some_name', value: 'gaurav'
                    environment name:'version', value: '1.0'
                    
                }
            }
            
            steps{
                echo "version is $version"
                echo "$some_name"
            }
        }
        
     }
    
}

===================================
anyOf:: in this any of the condition will get true then it will execute the code

pipeline{
    agent any
    environment{
        version='2.0'
        some_name="gaurav"
    }
    stages{
        stage('build'){
            when{
                anyOf{
                    environment name:'some_name', value: 'gaurav'
                    environment name:'version', value: '1.0'
                    
                }
            }
            
            steps{
                echo "version is $version"
                echo "$some_name"
            }
        }
        
     }
    
}
--------------------------------------------------------------------------------------------------------
14. BRANCH : deployemnt will be done by particular branch

pipeline{
    agent any
    stages{
        stage('master'){
            when{
		branch 'master'       //deployemt will be done by master branch
            }

            steps{
                echo "building master"
		echo "branch 2"
            }
        }
        stage('new-branch'){         
            when{
		branch 'new-branch'    // deployemnt will be done by new-branch only if it does not found in repo it will skip the stage.
            }

            steps{
                echo "testing new branch"
		echo "branch 2"
            }
                
        }
     }
    
}
------------------------------------------------------------------------------------------------
15 Tag 16 Changelog 17Changerequest
----------------------------------------------------------------------------------------------
20 Parallel stages with failFast :  with failFast options if any one of the stage fail then all the stage willl fail.


pipeline {
    agent any
    stages {
        stage('Stages Running in Parallel') {
            failFast true
            parallel {
                stage('Stage1') {
                    steps {
                        echo "Stage1 executing"
                        sleep 10
                    }
                }
                stage('Stage2') {
                    steps {
                        echo "Stage2 executing"
                        sleep 10
                    }
                }
                stage('Stage3') {
                    steps {
                        echo "Stage3 executing"
                        sleep 10
                    }                    
                }
            }
        }
    }
}
=================================
tailFast true and with error in stage2
pipeline {
    agent any
    stages {
        stage('Stages Running in Parallel') {
            failFast true
            parallel {
                stage('Stage1') {
                    steps {
                        echo "Stage1 executing"
                        sleep 10
                    }
                }
                stage('Stage2') {
                    steps {
                        echo "Stage2 executing"
                        sleep 9
                        error 'failed stage 2'
                    }
                }
                stage('Stage3') {
                    steps {
                        echo "Stage3 executing"
                        sleep 10
                    }                    
                }
            }
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
21) stage input : this will generate a new approval page an then user need to approv this.

It will ask fir inputat at the run time of job from user.

pipeline{			
    agent any

    stages{
        stage('Build'){	
			input{
                    message "Please specify environment:"			
                    ok "OK"
					submitter "dummyuser,admin@localhost.com"
					submitterParameter "whoIsSubmitter"
                    parameters {
						string(name: 'environment', defaultValue: 'Dev', description: 'Environment to build for (Valid values: Dev, Test, Prod)')   // normal string
						booleanParam(name: 'to_deploy_to_environment', defaultValue: true, description: '')    				//check box
						choice(choices: 'US-EAST-1\nUS-WEST-2', description: 'What AWS region?', name: 'region')    		//drop down
						text(name:'myText', defaultValue:'myTextValue', description:'myText') 									//text box 
						password(name:'myPassword', defaultValue:'myPasswordValue', description:'myDescription')  			//string password at run time 
						file(name:'myFile', description:'fileDescription')																		// browse a file
						credentials(name:'myCredentials', description:'myCredentailsDesc', required:true)				//save credentials in jenkins
                    }
                }			
            			
            steps{			
				echo "We are building for ${environment}, ${version}, and we are deploying to environment: ${to_deploy_to_environment}"
				echo "region:${region}, myText: ${myText}, myPassword: ${myPassword}, and myFile: ${myFile}"
				echo "submitter is: ${whoIsSubmitter}"
				echo "selected credentials is: ${myCredentials}"
			}
        }			
    }			
}		


--------------------------------------------------------------------------------
22) Post can be at the stage or at the end of the time line

Always/success/failure
---------------------
pipeline{
    agent any
    stages{
        stage('Build'){
            steps{
                    echo "building"
                    //error("Build failed")
            }
        }
    }
    post{
		//Only runs if the current Pipeline’s or stage’s run has a "success" status
		success{
			echo 'post->success is called'
		}
		//Only runs if the current Pipeline’s or stage’s run has a "failed" status
		failure { 
            echo 'post->failure is called'
        }
		//Runs regardless of the completion status of the Pipeline’s or stage’s run.
        always { 
            echo 'post->always is called'
        }
    }
}


		//Only runs if the current Pipeline’s or stage’s run has a different completion status from its previous run.
        changed { 
            echo 'post->changed is called'
        }

		//Only run the steps in post if the current Pipeline’s or stage’s run has an "unstable" status, usually caused by test failures, code violations, etc. 
		unstable { 
            echo 'post->unstable is called'
        }

		//Only runs if the current Pipeline’s or stage’s run is successful and the previous run failed or was unstable.
		fixed { 
            echo 'post->fixed is called'
        }

		//Only runs if the current Pipeline’s or stage’s status is failure, unstable, or aborted and the previous run was successful.
		regression { 
            echo 'post->regression is called'
        }

		//Only runs if the current Pipeline’s or stage’s run has an "aborted" status, usually due to the Pipeline being manually aborted. 
		aborted { 
            echo 'post->aborted is called'
        }

		//Runs after every other post condition has been evaluated, regardless of the status of Pipeline or stage
		cleanup{
			echo 'post->cleanup is called'
		}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
23)  buildDiscarder is used to set how many job you want. "Discard old builds"  and "Max # of builds to keep"


pipeline{
    agent any
    options{
        buildDiscarder(logRotator(numToKeepStr:'1'))     // it will take 1 max build , all the other old job will be deleted.        
    }
    stages{
        stage('build'){
            steps{
                echo "hello world"
            }
        }
        
    }
}

---------------------------------------------------------------------------------------------------
24)  disableConcurrentBuilds  : it will not allow to build more than one build in a job.

pipeline{
    agent any
    options{
        disableConcurrentBuilds()    // will allow to build more than one job
    }
    stages{
        stage('build'){
            steps{
                sleep 10
                echo "hello world"             
            }
        }        
    }
}

-----------------------------------------------------------------------------------------------------------------
25. Over ride Index : 
-----------------------------------------------------------------------------------------------------------
26. skipStagesAfterUnstable : this will skip all the stage when build was unstable.

pipeline{
    agent any
    options{
        skipStagesAfterUnstable()
    }
    stages{
        stage('build'){
            steps{
                //sleep 10
                echo "hello world"
                script{
                currentBuild.result = 'UNSTABLE'
                }
            }
            
        }
        stage('deploy')   // this stage will skip because build was UNSTABLE
        {
            steps{
                echo "deployment"
            }
        }
        
    }
}
------------------------------
27) This is used in multi branch pipeline whwn you want ti build job in some other directory.

check-out-to-sub-directory
-----------------------------------------------
28). New Container per stage

if you are useing docker and each stage use different container the  use this newcontainerperstage function

pipeline {	
	agent {
		docker {
			image 'ubuntu:latest'
		}
	}
    options {	
        newContainerPerStage()    // 2 conatiner will be created because 2 stage are used
    }	
    stages {	
        stage('Build') {	
            steps {	
                sh 'cat /etc/lsb-release'
            }	
        }	
        stage('Deploy') {	
            steps {	
                sh 'cat /etc/lsb-release'
            }	
        }			
    }	
}
----------------------------------------------------------------------------
29) pipeline parameters: it is same as 21  stage input but it will not ask for aproval it wil directly ask for input


pipeline {							
    agent any							
    parameters {							
        string(name: 'environment', defaultValue: 'Dev', description: 'Environment to build for (Valid values: Dev, Test, Prod)')
		string(name: 'version', defaultValue: '1.0', description: 'Version number to build for')
		booleanParam(name: 'to_deploy_to_environment', defaultValue: true, description: '')
		choice(choices: 'US-EAST-1\nUS-WEST-2', description: 'What AWS region?', name: 'region')
		text(name:'myText', defaultValue:'myTextValue', description:'myText')
		password(name:'myPassword', defaultValue:'myPasswordValue', description:'myDescription')
		file(name:'myFile', description:'fileDescription')
		credentials(name:'myCredentials', description:'myCredentailsDesc', required:true)					
    }							
    stages {							
        stage('Example') {							
            steps {							
                echo "We are building for ${params.environment}, ${params.version}, and we are deploying to environment: ${params.to_deploy_to_environment}"
				echo "region:${params.region}, myText: ${params.myText}, myPassword: ${params.myPassword}, and myFile: ${params.myFile}"
				echo "selected credentials is: ${params.myCredentials}"
            }							
        }							
    }							
}				

------------------------------------------------------------------------